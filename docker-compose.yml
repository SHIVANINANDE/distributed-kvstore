version: '3.8'

services:
  # Main KV Store service
  kvstore:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"   # HTTP API
      - "9090:9090"   # gRPC API
      - "2112:2112"   # Metrics endpoint
      - "7000:7000"   # Raft port
    environment:
      - KV_SERVER_HOST=0.0.0.0
      - KV_LOG_LEVEL=debug
      - KV_LOG_FORMAT=json
      - KV_METRICS_ENABLED=true
    volumes:
      - kvstore_data:/app/data
      - ./config.yaml:/app/config.yaml:ro
    networks:
      - kvstore-network
    depends_on:
      - prometheus
      - jaeger
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
      - ./deployments/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - kvstore-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployments/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - kvstore-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.46
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - kvstore-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for comparison/benchmarking
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - kvstore-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Health check service for monitoring
  health-monitor:
    image: curlimages/curl:8.1.2
    depends_on:
      - kvstore
      - prometheus
      - grafana
      - jaeger
    networks:
      - kvstore-network
    command: >
      sh -c "
        echo 'Starting health monitoring...'
        while true; do
          echo '=== Health Check Report $(date) ==='
          echo 'KV Store:' && curl -s http://kvstore:8080/health | jq '.status' || echo 'FAILED'
          echo 'Prometheus:' && curl -s http://prometheus:9090/-/healthy && echo 'OK' || echo 'FAILED'
          echo 'Grafana:' && curl -s http://grafana:3000/api/health | jq '.database' || echo 'FAILED'
          echo 'Jaeger:' && curl -s http://jaeger:14269/ > /dev/null && echo 'OK' || echo 'FAILED'
          echo '================================='
          sleep 60
        done
      "
    restart: unless-stopped

  # Load balancer (nginx) for high availability
  nginx:
    image: nginx:1.24-alpine
    ports:
      - "80:80"
    volumes:
      - ./deployments/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - kvstore
    networks:
      - kvstore-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  kvstore_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

networks:
  kvstore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16