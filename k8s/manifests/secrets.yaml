apiVersion: v1
kind: Secret
metadata:
  name: kvstore-tls
  namespace: kvstore
  labels:
    app: kvstore
    component: security
type: kubernetes.io/tls
data:
  # Base64 encoded TLS certificate and key
  # These should be generated using cert-manager or provided externally
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi4uLgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
---
apiVersion: v1
kind: Secret
metadata:
  name: kvstore-secrets
  namespace: kvstore
  labels:
    app: kvstore
    component: security
type: Opaque
data:
  # JWT signing secret (base64 encoded)
  jwt-secret: c29tZS1yYW5kb20tc2VjcmV0LWZvci1qd3Qtc2lnbmluZw==
  
  # Admin password (base64 encoded)
  admin-password: YWRtaW4xMjM0NTY=
  
  # Database encryption key (base64 encoded)
  db-encryption-key: YWVzLTI1Ni1nY20ta2V5LWZvci1kYXRhYmFzZS1lbmNyeXB0aW9u
  
  # Backup encryption key (base64 encoded)
  backup-key: YmFja3VwLWVuY3J5cHRpb24ta2V5LWZvci1zZWN1cmUtYmFja3Vwcw==
  
  # API keys for external services
  monitoring-api-key: bW9uaXRvcmluZy1hcGkta2V5LWZvci1leHRlcm5hbC1zZXJ2aWNlcw==
  
  # S3 access credentials (if not using IAM roles)
  aws-access-key-id: QUtJQUlPU0ZPRFRONGVYQU1QTEU=
  aws-secret-access-key: d0phbHJYVXRuRkVNSS9LN01ERU5HL2JQeFJmaUNZRVhBTVBMRUtFWQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: kvstore-registry-credentials
  namespace: kvstore
  labels:
    app: kvstore
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5leGFtcGxlLmNvbSI6eyJ1c2VybmFtZSI6InJlZ2lzdHJ5LXVzZXIiLCJwYXNzd29yZCI6InJlZ2lzdHJ5LXBhc3MiLCJhdXRoIjoiY21WbmFYTjBjbmt0ZFhObGNqcHlaV2RwYzNSeWVTMXdZWE56In19fQ==
---
# Secret for external monitoring credentials
apiVersion: v1
kind: Secret
metadata:
  name: kvstore-monitoring-secrets
  namespace: kvstore
  labels:
    app: kvstore
    component: monitoring
type: Opaque
data:
  # Prometheus basic auth
  prometheus-username: cHJvbWV0aGV1cw==
  prometheus-password: cHJvbS1wYXNzd29yZA==
  
  # Grafana admin credentials
  grafana-admin-user: YWRtaW4=
  grafana-admin-password: Z3JhZmFuYS1hZG1pbi1wYXNz
  
  # Alert manager webhook URL
  alertmanager-webhook: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvLi4u
---
# Secret for backup service credentials
apiVersion: v1
kind: Secret
metadata:
  name: kvstore-backup-secrets
  namespace: kvstore
  labels:
    app: kvstore
    component: backup
type: Opaque
data:
  # S3 backup credentials
  s3-access-key: UzNBQ0NFU1NLRVlGT1JCQUNLVVBTRVJWSUNF
  s3-secret-key: czNzZWNyZXRrZXlmb3JiYWNrdXBzZXJ2aWNlYWNjZXNz
  
  # Encryption key for backups
  backup-encryption-key: YmFja3VwLWVuY3J5cHRpb24ta2V5LTMyLWJ5dGVzLWxvbmc=
  
  # SMTP credentials for notifications
  smtp-username: YmFja3VwQGV4YW1wbGUuY29t
  smtp-password: c210cC1wYXNzd29yZC1mb3ItYmFja3Vw
---
# Secret for service mesh/proxy credentials
apiVersion: v1
kind: Secret
metadata:
  name: kvstore-proxy-secrets
  namespace: kvstore
  labels:
    app: kvstore
    component: proxy
type: Opaque
data:
  # Proxy authentication
  proxy-auth-token: cHJveHktYXV0aC10b2tlbi1mb3Itc2VjdXJlLWNvbW11bmljYXRpb24=
  
  # Service mesh certificates
  mesh-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t
  mesh-key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t
---
# Secret for operator service account
apiVersion: v1
kind: Secret
metadata:
  name: kvstore-operator-secrets
  namespace: kvstore
  labels:
    app: kvstore-operator
    component: operator
type: Opaque
data:
  # Operator API token
  operator-token: b3BlcmF0b3ItYXBpLXRva2VuLWZvci1jbHVzdGVyLW1hbmFnZW1lbnQ=
  
  # Webhook signing key
  webhook-signing-key: d2ViaG9vay1zaWduaW5nLWtleS1mb3Itc2VjdXJlLXZhbGlkYXRpb24=
---
# External secrets for cloud provider integration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: kvstore-secret-store
  namespace: kvstore
  labels:
    app: kvstore
    component: secrets
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        jwt:
          serviceAccountRef:
            name: kvstore-external-secrets
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kvstore-external-secrets
  namespace: kvstore
  labels:
    app: kvstore
    component: secrets
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: kvstore-secret-store
    kind: SecretStore
  target:
    name: kvstore-external-secrets
    creationPolicy: Owner
  data:
  - secretKey: database-password
    remoteRef:
      key: kvstore/database
      property: password
  - secretKey: api-key
    remoteRef:
      key: kvstore/api
      property: key
  - secretKey: encryption-key
    remoteRef:
      key: kvstore/encryption
      property: key
---
# Sealed secret example for GitOps
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: kvstore-sealed-secrets
  namespace: kvstore
  labels:
    app: kvstore
    component: sealed-secrets
spec:
  encryptedData:
    # These would be encrypted with the sealed secrets controller public key
    database-root-password: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAx...
    api-secret-key: AgAKAoiQU7Ry2S+9M1S7+K5N3LQ8yH7bX...
    jwt-signing-key: AgAWsRtU9mNQdK3pL2dW8vQ6eR4yT9nZ...
  template:
    metadata:
      name: kvstore-sealed-secrets
      namespace: kvstore
    type: Opaque
---
# Certificate request for cert-manager
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kvstore-tls-cert
  namespace: kvstore
  labels:
    app: kvstore
    component: certificates
spec:
  secretName: kvstore-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - kvstore.example.com
  - kvstore-api.example.com
  - "*.kvstore.example.com"
---
# Cluster issuer for cert-manager
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app: kvstore
    component: certificates
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@example.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - dns01:
        route53:
          region: us-west-2
          accessKeyID: AKIAIOSFODNN7EXAMPLE
          secretAccessKeySecretRef:
            name: route53-credentials
            key: secret-access-key
---
# RBAC for secret access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kvstore-secret-reader
  namespace: kvstore
  labels:
    app: kvstore
    component: rbac
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/kvstore-secret-reader-role"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kvstore-secret-reader
  namespace: kvstore
  labels:
    app: kvstore
    component: rbac
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kvstore-secret-reader
  namespace: kvstore
  labels:
    app: kvstore
    component: rbac
subjects:
- kind: ServiceAccount
  name: kvstore-secret-reader
  namespace: kvstore
roleRef:
  kind: Role
  name: kvstore-secret-reader
  apiGroup: rbac.authorization.k8s.io