# Complete Deployment Manifest for KVStore Production Kubernetes Deployment
# This file demonstrates the production-ready deployment with operator

apiVersion: v1
kind: Namespace
metadata:
  name: kvstore
  labels:
    name: kvstore
    app: kvstore

---
# Example KVStore Custom Resource
apiVersion: kvstore.io/v1
kind: KVStore
metadata:
  name: production-cluster
  namespace: kvstore
  labels:
    app: kvstore
    environment: production
spec:
  cluster:
    name: "production-cluster"
    replicas: 3
    version: "v1.0.0"
    image: "kvstore:v1.0.0"
  
  storage:
    storageClass: "fast-ssd"
    size: "100Gi"
    backupStorage:
      enabled: true
      storageClass: "backup-storage"
      size: "500Gi"
      retention: "30d"
  
  resources:
    requests:
      cpu: "1"
      memory: "2Gi"
    limits:
      cpu: "4"
      memory: "8Gi"
  
  security:
    tls:
      enabled: true
      secretName: "kvstore-tls"
      issuerRef:
        name: "letsencrypt-prod"
        kind: "ClusterIssuer"
    authentication:
      enabled: true
      method: "jwt"
      secretName: "kvstore-secrets"
    rbac:
      enabled: true
      defaultRole: "user"
  
  monitoring:
    enabled: true
    prometheus:
      enabled: true
      scrapeInterval: "30s"
    grafana:
      enabled: true
      dashboards: true
    alerting:
      enabled: true
      webhook: "https://hooks.slack.com/services/..."
  
  backup:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM
    retention:
      daily: 7
      weekly: 4
      monthly: 12
    storage:
      type: "s3"
      s3:
        bucket: "kvstore-backups"
        region: "us-west-2"
        prefix: "production-cluster/"
        encryption: "AES256"
  
  scaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 5
    targetCPUUtilization: 70
    targetMemoryUtilization: 80
  
  network:
    service:
      type: "ClusterIP"
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    ingress:
      enabled: true
      className: "nginx"
      hostname: "kvstore.example.com"
      tls: true
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
        nginx.ingress.kubernetes.io/rate-limit: "100"
  
  maintenance:
    updateStrategy: "RollingUpdate"
    maxUnavailable: 1
    podDisruptionBudget:
      enabled: true
      minAvailable: 2

---
# Example Backup Resource
apiVersion: kvstore.io/v1
kind: KVStoreBackup
metadata:
  name: production-cluster-manual-backup
  namespace: kvstore
  labels:
    app: kvstore
    backup-type: manual
spec:
  source:
    kvstoreName: "production-cluster"
    namespace: "kvstore"
  
  backup:
    type: "full"
    compression: true
    encryption: true
    retention: "90d"
  
  storage:
    type: "s3"
    s3:
      bucket: "kvstore-backups"
      region: "us-west-2"
      prefix: "manual-backups/"
      storageClass: "STANDARD_IA"
      encryption: "AES256"

---
# Example Restore Resource (commented out for safety)
# apiVersion: kvstore.io/v1
# kind: KVStoreRestore
# metadata:
#   name: production-cluster-restore
#   namespace: kvstore
# spec:
#   target:
#     kvstoreName: "production-cluster"
#     namespace: "kvstore"
#     createIfNotExists: false
#   
#   source:
#     backupName: "production-cluster-backup-20240315"
#     location: "s3://kvstore-backups/production-cluster/backup-20240315.tar.gz"
#   
#   restore:
#     strategy: "replace"
#     verification: true
#     parallelism: 2

---
# Operator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kvstore-operator
  namespace: kvstore
  labels:
    app: kvstore-operator
    component: operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kvstore-operator
      component: operator
  template:
    metadata:
      labels:
        app: kvstore-operator
        component: operator
    spec:
      serviceAccountName: kvstore-operator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: operator
        image: kvstore-operator:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        - containerPort: 8081
          name: health
          protocol: TCP
        - containerPort: 9443
          name: webhook
          protocol: TCP
        env:
        - name: WATCH_NAMESPACE
          value: ""  # Watch all namespaces
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OPERATOR_NAME
          value: "kvstore-operator"
        - name: ENABLE_WEBHOOKS
          value: "true"
        - name: WEBHOOK_PORT
          value: "9443"
        - name: METRICS_PORT
          value: "8080"
        - name: HEALTH_PORT
          value: "8081"
        args:
        - --metrics-bind-address=0.0.0.0:8080
        - --health-probe-bind-address=0.0.0.0:8081
        - --leader-elect
        - --webhook-port=9443
        - --max-concurrent-reconciles=5
        - --log-level=info
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "1"
            memory: "1Gi"
        volumeMounts:
        - name: webhook-certs
          mountPath: /tmp/k8s-webhook-server/serving-certs
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: health
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: health
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: webhook-certs
        secret:
          secretName: kvstore-operator-webhook-certs
      terminationGracePeriodSeconds: 10
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
# Operator Service
apiVersion: v1
kind: Service
metadata:
  name: kvstore-operator-webhook
  namespace: kvstore
  labels:
    app: kvstore-operator
    component: webhook
spec:
  type: ClusterIP
  ports:
  - name: webhook
    port: 443
    targetPort: webhook
    protocol: TCP
  selector:
    app: kvstore-operator
    component: operator

---
# Operator Metrics Service
apiVersion: v1
kind: Service
metadata:
  name: kvstore-operator-metrics
  namespace: kvstore
  labels:
    app: kvstore-operator
    component: metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 8080
    targetPort: metrics
    protocol: TCP
  selector:
    app: kvstore-operator
    component: operator

---
# Horizontal Pod Autoscaler for Operator
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: kvstore-operator-hpa
  namespace: kvstore
  labels:
    app: kvstore-operator
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kvstore-operator
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60