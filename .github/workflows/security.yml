name: Security Scanning & Multi-Platform Builds

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Advanced Security Scanning
  advanced-security:
    name: Advanced Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: go
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:go"

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/kubernetes
          p/docker
        generateSarif: "1"

    - name: Upload Semgrep results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif
      if: always()

    - name: Run Nancy - Go dependency vulnerability scanner
      run: |
        go list -json -deps ./... | docker run --rm -i sonatypecommunity/nancy:latest sleuth

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/golang@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk.sarif
      continue-on-error: true

    - name: Upload Snyk results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.sarif
      if: always()

    - name: License compliance check
      run: |
        go install github.com/fossa-contrib/fossa-cli@latest
        fossa analyze
        fossa test
      env:
        FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
      continue-on-error: true

  # Multi-Platform Container Builds
  multi-platform-build:
    name: Multi-Platform Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [kvstore, kvstore-proxy, kvstore-operator, kvstore-backup]
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.${{ matrix.component }}
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.component }}-${{ matrix.platform }}
        cache-to: type=gha,mode=max,scope=${{ matrix.component }}-${{ matrix.platform }}
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          TARGETPLATFORM=${{ matrix.platform }}

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: multi-platform-build
    strategy:
      matrix:
        component: [kvstore, kvstore-proxy, kvstore-operator, kvstore-backup]
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-${{ matrix.component }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-${{ matrix.component }}.sarif'

    - name: Run Anchore Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
        fail-build: false
        output-format: sarif

    - name: Upload Anchore scan SARIF report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

    - name: Docker Scout vulnerability scan
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
        sarif-file: scout-${{ matrix.component }}.sarif
        summary: true

    - name: Upload Docker Scout scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: scout-${{ matrix.component }}.sarif
      if: always()

  # SLSA Provenance Generation
  slsa-provenance:
    name: Generate SLSA Provenance
    runs-on: ubuntu-latest
    needs: multi-platform-build
    permissions:
      id-token: write
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate SLSA provenance
      uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        digest: ${{ needs.multi-platform-build.outputs.digest }}
        registry-username: ${{ github.actor }}
        registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Software Bill of Materials (SBOM)
  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: multi-platform-build
    strategy:
      matrix:
        component: [kvstore, kvstore-proxy, kvstore-operator, kvstore-backup]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom-${{ matrix.component }}.spdx.json

    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v3
      with:
        name: sbom-${{ matrix.component }}
        path: sbom-${{ matrix.component }}.spdx.json

    - name: Attach SBOM to release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: sbom-${{ matrix.component }}.spdx.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Infrastructure Security Scanning
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov - Infrastructure as code scanner
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        quiet: true
        soft_fail: true
        framework: terraform,kubernetes,dockerfile,secrets
        output_format: sarif
        output_file_path: checkov-report.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: checkov-report.sarif

    - name: Run Terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'terraform'
        iac_version: 'v14'
        policy_type: 'aws'
        only_warn: true
        sarif_upload: true

    - name: Run kube-score on Kubernetes manifests
      run: |
        wget https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz
        tar -xzf kube-score_1.16.1_linux_amd64.tar.gz
        ./kube-score score k8s/manifests/*.yaml --output-format sarif > kube-score.sarif

    - name: Upload kube-score results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: kube-score.sarif

    - name: Run Polaris - Kubernetes best practices
      run: |
        curl -L https://github.com/FairwindsOps/polaris/releases/download/8.5.1/polaris_linux_amd64.tar.gz | tar -xz
        ./polaris audit --format=json k8s/manifests/ > polaris-results.json

    - name: Upload Polaris results
      uses: actions/upload-artifact@v3
      with:
        name: polaris-results
        path: polaris-results.json

  # Secrets Scanning
  secrets-scanning:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run GitLeaks
      uses: zricethezav/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_ENABLE_COMMENTS: false

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline

  # Compliance Scanning
  compliance-scanning:
    name: Compliance Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Falco rules validation
      run: |
        docker run --rm -v $PWD:/workspace falcosecurity/falco:latest \
          falco --validate /workspace/security/falco-rules.yaml

    - name: Run CIS Kubernetes Benchmark
      run: |
        docker run --rm -v $PWD/k8s:/k8s aquasec/kube-bench:latest \
          --benchmark cis-1.6 --json > cis-benchmark-results.json

    - name: Upload CIS benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: cis-benchmark-results
        path: cis-benchmark-results.json

    - name: Run NIST compliance check
      run: |
        # Custom NIST compliance validation
        python3 scripts/nist-compliance-check.py k8s/manifests/

  # Notification for Security Issues
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [advanced-security, container-security, infrastructure-security, secrets-scanning]
    if: failure()
    
    steps:
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        message: |
          🚨 Security scan failed for ${{ github.repository }}
          📝 Commit: ${{ github.sha }}
          🌿 Branch: ${{ github.ref }}
          👤 Author: ${{ github.actor }}
          🔗 Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Please review the security findings immediately.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

    - name: Create security issue
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security scan failed for commit ${context.sha}`,
            body: `Security scanning workflow failed. Please review the results and address any findings.\n\nWorkflow: ${context.workflow}\nRun: ${context.runId}`,
            labels: ['security', 'bug', 'high-priority']
          })