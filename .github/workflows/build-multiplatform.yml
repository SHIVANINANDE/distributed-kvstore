name: Multi-Platform Build

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.25'

jobs:
  build-matrix:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            os: ubuntu-latest
          - goos: linux
            goarch: arm64
            os: ubuntu-latest
          - goos: linux
            goarch: arm
            goarm: '7'
            os: ubuntu-latest
          
          # macOS builds
          - goos: darwin
            goarch: amd64
            os: macos-latest
          - goos: darwin
            goarch: arm64
            os: macos-latest
          
          # Windows builds
          - goos: windows
            goarch: amd64
            os: windows-latest
          - goos: windows
            goarch: arm64
            os: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Install dependencies
      run: go mod download

    - name: Install protoc (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install protobuf
        fi
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Install protoc (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install protoc
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Generate protobuf code
      run: make proto

    - name: Set build variables
      id: vars
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "COMMIT=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

    - name: Build binaries
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        CGO_ENABLED: 0
      run: |
        # Set binary extension for Windows
        if [ "${{ matrix.goos }}" = "windows" ]; then
          export EXT=".exe"
        else
          export EXT=""
        fi
        
        # Create output directory
        mkdir -p dist/${{ matrix.goos }}_${{ matrix.goarch }}
        
        # Build server
        go build -ldflags="-s -w -X main.version=${{ steps.vars.outputs.VERSION }} -X main.commit=${{ steps.vars.outputs.COMMIT }} -X main.buildTime=${{ steps.vars.outputs.BUILD_TIME }}" \
          -o dist/${{ matrix.goos }}_${{ matrix.goarch }}/kvstore-server${EXT} ./cmd/server
        
        # Build client
        go build -ldflags="-s -w -X main.version=${{ steps.vars.outputs.VERSION }} -X main.commit=${{ steps.vars.outputs.COMMIT }} -X main.buildTime=${{ steps.vars.outputs.BUILD_TIME }}" \
          -o dist/${{ matrix.goos }}_${{ matrix.goarch }}/kvstore-client${EXT} ./cmd/client
        
        # Build kvtool
        go build -ldflags="-s -w -X main.version=${{ steps.vars.outputs.VERSION }} -X main.commit=${{ steps.vars.outputs.COMMIT }} -X main.buildTime=${{ steps.vars.outputs.BUILD_TIME }}" \
          -o dist/${{ matrix.goos }}_${{ matrix.goarch }}/kvtool${EXT} ./cmd/kvtool
        
        # Build cluster CLI
        go build -ldflags="-s -w -X main.version=${{ steps.vars.outputs.VERSION }} -X main.commit=${{ steps.vars.outputs.COMMIT }} -X main.buildTime=${{ steps.vars.outputs.BUILD_TIME }}" \
          -o dist/${{ matrix.goos }}_${{ matrix.goarch }}/cluster-cli${EXT} ./cmd/cluster-cli

    - name: Test binaries
      if: matrix.goos == runner.os || (matrix.goos == 'linux' && runner.os == 'Linux') || (matrix.goos == 'darwin' && runner.os == 'macOS') || (matrix.goos == 'windows' && runner.os == 'Windows')
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          ./dist/${{ matrix.goos }}_${{ matrix.goarch }}/kvstore-server.exe --version || echo "Version flag not implemented"
        else
          ./dist/${{ matrix.goos }}_${{ matrix.goarch }}/kvstore-server --version || echo "Version flag not implemented"
        fi

    - name: Create archive
      run: |
        cd dist/${{ matrix.goos }}_${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r ../kvstore-${{ matrix.goos }}-${{ matrix.goarch }}.zip .
        else
          tar -czf ../kvstore-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz .
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kvstore-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          dist/kvstore-${{ matrix.goos }}-${{ matrix.goarch }}.*
        retention-days: 7

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-matrix
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*.tar.gz
          artifacts/**/*.zip
        body: |
          ## Release Notes
          
          ### Features
          - Multi-platform binaries for Linux, macOS, and Windows
          - Support for AMD64, ARM64, and ARM architectures
          
          ### Downloads
          Choose the appropriate binary for your platform:
          - **Linux AMD64**: kvstore-linux-amd64.tar.gz
          - **Linux ARM64**: kvstore-linux-arm64.tar.gz
          - **Linux ARM**: kvstore-linux-arm.tar.gz
          - **macOS AMD64**: kvstore-darwin-amd64.tar.gz
          - **macOS ARM64** (Apple Silicon): kvstore-darwin-arm64.tar.gz
          - **Windows AMD64**: kvstore-windows-amd64.zip
          - **Windows ARM64**: kvstore-windows-arm64.zip
          
          ### Installation
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Move the binaries to your PATH
          
          ### Checksums
          See attached checksum files for verification.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}