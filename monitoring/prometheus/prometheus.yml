# Prometheus Configuration for KVStore
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'kvstore-cluster'
    environment: '${ENVIRONMENT:-dev}'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  - "rules/*.yml"

# Scrape configurations
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 5s
    metrics_path: /metrics

  # KVStore application metrics
  - job_name: 'kvstore'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - kvstore
            - kvstore-dev
            - kvstore-staging
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      - source_labels: [__meta_kubernetes_pod_node_name]
        action: replace
        target_label: kubernetes_node
    scrape_interval: 10s
    scrape_timeout: 5s

  # Node Exporter for system metrics
  - job_name: 'node-exporter'
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
    scrape_interval: 15s

  # cAdvisor for container metrics
  - job_name: 'cadvisor'
    kubernetes_sd_configs:
      - role: node
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
    scrape_interval: 15s

  # Kubernetes API Server
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
      - role: endpoints
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  # Kubernetes service endpoints
  - job_name: 'kubernetes-service-endpoints'
    kubernetes_sd_configs:
      - role: endpoints
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name

  # KVStore Raft metrics (custom port)
  - job_name: 'kvstore-raft'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - kvstore
            - kvstore-dev
            - kvstore-staging
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        action: keep
        regex: kvstore
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]
        action: keep
        regex: server
      - source_labels: [__address__]
        action: replace
        regex: ([^:]+):.*
        replacement: $1:8081
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
    metrics_path: /metrics/raft
    scrape_interval: 5s

  # KVStore Storage metrics
  - job_name: 'kvstore-storage'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - kvstore
            - kvstore-dev
            - kvstore-staging
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        action: keep
        regex: kvstore
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]
        action: keep
        regex: server
      - source_labels: [__address__]
        action: replace
        regex: ([^:]+):.*
        replacement: $1:8081
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
    metrics_path: /metrics/storage
    scrape_interval: 10s

  # JVM metrics for Go applications
  - job_name: 'kvstore-runtime'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - kvstore
            - kvstore-dev
            - kvstore-staging
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        action: keep
        regex: kvstore
      - source_labels: [__address__]
        action: replace
        regex: ([^:]+):.*
        replacement: $1:8081
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
    metrics_path: /metrics/runtime
    scrape_interval: 30s

# Storage retention
storage:
  tsdb:
    retention.time: 30d
    retention.size: 50GB
    wal-compression: true

# Recording rules for performance optimization
recording_rules:
  - name: kvstore_aggregations
    interval: 30s
    rules:
      - record: kvstore:request_rate_5m
        expr: rate(kvstore_requests_total[5m])
      - record: kvstore:error_rate_5m
        expr: rate(kvstore_requests_total{status=~"4..|5.."}[5m])
      - record: kvstore:latency_95th_5m
        expr: histogram_quantile(0.95, rate(kvstore_request_duration_seconds_bucket[5m]))
      - record: kvstore:raft_leader_elections_rate_1h
        expr: rate(kvstore_raft_leader_elections_total[1h])
      - record: kvstore:storage_size_bytes
        expr: kvstore_storage_size_bytes
      - record: kvstore:memory_usage_percent
        expr: (kvstore_memory_used_bytes / kvstore_memory_total_bytes) * 100